{"meta":{"title":"H.Peng","subtitle":"","description":"","author":"H.Peng","url":"http://pengah123.github.io","root":"/"},"pages":[{"title":"about","date":"2020-03-16T11:52:03.000Z","updated":"2020-03-16T11:52:54.363Z","comments":true,"path":"about/index.html","permalink":"http://pengah123.github.io/about/index.html","excerpt":"","text":""},{"title":"friends","date":"2020-03-16T11:53:21.000Z","updated":"2020-03-16T11:54:36.478Z","comments":true,"path":"friends/index.html","permalink":"http://pengah123.github.io/friends/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-03-16T11:11:09.000Z","updated":"2020-03-16T11:51:25.241Z","comments":true,"path":"categories/index.html","permalink":"http://pengah123.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-03-16T11:48:38.000Z","updated":"2020-03-16T11:50:46.864Z","comments":true,"path":"tags/index.html","permalink":"http://pengah123.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"java学习笔记02","slug":"java学习笔记02","date":"2020-03-31T15:35:17.000Z","updated":"2020-03-31T15:45:02.819Z","comments":true,"path":"2020/03/31/java-xue-xi-bi-ji-02/","link":"","permalink":"http://pengah123.github.io/2020/03/31/java-xue-xi-bi-ji-02/","excerpt":"","text":"Interator接口获取集合对应的迭代器，用来遍历集合中的元素，是Collection元素集合的通用获取方式 常用方法 next() 获取下一个 hasnext() 判断是否还有下一个, NoSuchElementException异常 使用步骤： 使用集合中的方法iterator()方法获取一个interator对象 使用对象的hasnext方法判断 使用next方法取出下一个元素 for each循环（增强for循环）： 用for循环的格式简化了iteator迭代器 for(类型名 变量名：集合名) for(int i : arr); 泛型： 定义 一个不确定类型 可以用来接收变量 创建对象的时候会确定泛型的类型 当集合不使用泛型时，会使用Object类型，可以添加任意类型的数据，坏处就是不安全，容易引发异常 使用泛型的好处：把运行期异常提升到了编译期异常 定义一个含有泛型的类 public class GenericClass&lt;E&gt;{ private E name; public E getName(){ return name; } public void setName(E name){ this.name=name; } } 含有泛型的方法在调用方法时确定泛型的类型 //定义一个含有泛型的方法 public &lt;M&gt; void method01(&lt;M&gt; m){} 这个方法可以用泛型 //定义一个含有泛型的静态方法 public static &lt;S&gt; void method01(&lt;S&gt; m){} 含有泛型的接口 在接口的实现类中指定泛型的类型 在实现类中不指定泛型，实现类中的泛型使用和接口中一样的泛型，在对象中指定泛型类型 泛型通配符： 不知道用什么类型来接收的时候，用？表示未知通配符 ？代表任意数据类型 使用方法： 不能创建对象使用，只能作为方法的参数使用 通配符高级使用——受限泛型 类型名称 &lt;? extends类&gt; 对象名称 //只能接收该类型及其子类 类型名称 &lt;? super类&gt; 对象名称 //只能接收该类型及其父类数据结构：栈、列表、数组、链表、红黑树 栈：先进后出队列：先进先出数组： 特点 查询快，增删慢 数组的长度无法改变，要删除或增加需要新建一个数组，把原数组中的数据删除之后复制到新数组，然后销毁原数组 链表：查询慢，增删快 查询慢：链表中的地址不是连续的，每次查询都要从头开始 增删快：增加或删除一个元素对链表的整体结构没有影响 一个节点=一个数据源+两个指针域 单向链表：只有一条链子，不能保证元素的顺序 双向链表：有两条链子，以一条链子专门记录元素的顺序，是有序集合 树——二叉树——排序树（左边小右边大）——平衡树（左右孩子数量一样） 红黑树：趋近于平衡树，查找子节点最大次数和最小次数之差不能超过2倍 节点可以是黑色或红色 根节点是黑色 叶子节点（空节点）是黑色 每个红色节点的子节点是黑色 每个节点到其每个叶子系欸但的所有路径上黑色节点数相同 红黑树的查询速度非常快 可变参数： 使用背景： 参数列表的类型已经确定，但是参数的个数不确定，一般用在定义方法时使用。 底层是一个数组，根据传递参数的个数不同创建不同长度的数组来存储，可传递0个或多个 method（int…arr）/ method(Object…o) 注意： 一个方法的参数列表只能有一个可变参数；如果参数有多个，可变参数必须写在列表末尾 Collections工具类：记住：Collection是接口，Collections是工具类 常用方法 Collections.addAll(list,”a”,”c”); //往集合中添加多个数据 static void shuffle(List&lt;?&gt; list) //随机打乱集合的顺序 Collections.sort(list) //升序排序，排序的数据类型需要实现comparable接口，重写接口中的 CompareTo()方法（返回值为：this.参数-别人.参数就是升序，反之降序） Collections.sort(list1, new Comparator&lt;Student&gt;(){ public int compare(Student o1,Student o2){ int result=o1.age-o2.age; if(result==0){ result o1.getName.charAt(0)-o2.getName.charAt(0); } return result;//按年龄升序，如果年龄相同则按照姓名首字母升序 } }); Map集合： 定义： 包含一个键，一个值 键是不可重复的，键和值一一对应，值可重复","categories":[],"tags":[]},{"title":"java学习笔记01","slug":"java学习笔记01","date":"2020-03-31T15:32:32.000Z","updated":"2020-03-31T15:43:53.198Z","comments":true,"path":"2020/03/31/java-xue-xi-bi-ji-01/","link":"","permalink":"http://pengah123.github.io/2020/03/31/java-xue-xi-bi-ji-01/","excerpt":"","text":"Calender类： 是一个抽象类 getInstance()方法直接返回一个canlender子类 //创建对象 Calendar c = Calender.getInstance(); //常用方法 public int get (int field): 返回给定日历字段的值 public void set(int field, int value) 将给定的日历字段设置为指定值 public abstract void add(int field,int amount) 为给定日历字段添加或减去指定的时间量 public Date getTime() 返回一个表示此calender的时间值的Date对象 field——Calender.MONTHSystem类： currentTimeMills（)方法： 以毫秒为单位返回当前时间 arraycopy()方法：将数组中的制定数据拷贝到另一个数组中 参数：原数组，起始位置，目标数组，复制长度 StringBuilder类：定义 字符串缓冲区，可以提高字符串使用的效率 可以改变长度，初始长度为16，始终只有一个数组 常用方法：toString(), append(); １.append(): 可以添加任意类型的数据，返回的是字符串本身 ２.toString():将StringBuilder对象转换为String对象 String和StringBuilder的转换 将String转换为StringBuilder对象，直接StringBuilder（str)新建一个StringBuilder对象 快捷键的使用：StringBuilder（str).var +回车 自动生成新建一个StringBuilder对象；.new 新建，.var补全新建 包装类:示例： int Integer char Character //构造方法： Integer i=new Integer(int value/String s) //静态方法 Integer.valueOf(int i) Integer. valueOf(String s)自动装箱，自动拆箱：基本类型和包装类之间的转换 Integer i=1; String s=&quot;123&quot;;基本类型和字符串类型之间的转换： 基本类型——字符串 基本类型的值+“” 包装类的静态方法：toString() Integer.toString() String 类的静态方法 valueOf() String.valueOf(int i) 字符串——基本类型 包装类的静态方法：Integer.parseInt(String s) 集合框架 学习顶层，使用底层 Collections常用方法： boolean add(E e) void clear() boolean remove(E e) boolean contains(E e) boolean isEmpty() int size() Object[] toArray() 打印输出：直接sout(对象名)； List接口： 常用方法： add(int index,E element) get(int index) remove(int index) set(int index, e Element) 注意，使用过程中防止索引越界异常 ArrayList集合： （不是同步的）跟数组一样，查询快，增删慢 LinkedList集合： 跟链表一样，增删快，查询慢 常用方法： addFirst(); addLast(); push(); getFirst(); getLast(); removeFirst(); removeLast(); pop(); isEmpty(); vector集合： （同步的），底层也是数组 ，被ArrayList取代了 注：此实现不是同步的，说明是多线程，说明快 Set接口： 用迭代器或者增强for遍历 HashSet集合： 哈希表结构，速度快，无序集合 hashCode()方法返回对象的哈希码值，可以在类中重写此方法 哈希表=数组+链表+红黑树 存储方式：将元素对应的哈希值放在数组中，如果链表长度超过八倍，就将链表转换为红黑树 哈希冲突时调用equals（）方法 HashSet中存储的元素类型，必须要重写hashCode（）和equals（）方法 LinkedHashSet集合 继承于HashSet集合 多了一条链表以保证元素有序 有序，不允许重复 HashSet中值不重复的原理","categories":[],"tags":[]},{"title":"解决github连不上的问题","slug":"解决github连不上的问题","date":"2020-03-18T09:39:29.000Z","updated":"2020-03-18T13:40:01.593Z","comments":true,"path":"2020/03/18/jie-jue-github-lian-bu-shang-de-wen-ti/","link":"","permalink":"http://pengah123.github.io/2020/03/18/jie-jue-github-lian-bu-shang-de-wen-ti/","excerpt":"","text":"前面因为github连不上我一直用的vpn上的github，这也导致了我的博客部署到github失败，没办法只能部署到coding。 这几天我的vpn到期了，github上不去真的还挺不方便的。之前我一直以为github是被墙了，然后我发现别人的都能用，手机端也是可以用的，难不成真的是我的电脑的问题？？？还能屏蔽单个网站？？？这超出我的认知了 方法一：百度上大部分是一些改host文件的，具体操作如下：第一步：找到host文件：C:\\Windows\\System32\\drivers\\etc，复制粘贴到桌面（host文件不能直接修改保存需要拷贝出来改完再放回去）； 第二步：到这个网站——http://ipaddress.com/ip-lookup/，查找这两个网址的IP地址并复制到host文件下 140.82.114.3 github.com 199.232.69.194 github.global.ssl.fastly.net第三步：别忘了再把host文件从桌面复制粘贴回到etc文件下。 总之，这个方法我试了很久，都没成功 方法二：改电脑的DNS第一步：右键电脑的设置 第二步：打开网络和Internet设置 第三步：选择“更改适配器” 第四步：右键你的网络，选择属性 第五步：选中“iPv4协议”，选择属性 第六步：更改DNS服务器的值可靠的DNS服务供应商： V2EX DNS ：199.91.73.222 &nbsp; 178.79.131.110 阿里DNS ：223.5.5.5 &nbsp; 223.6.6.6 Google DNS：8.8.8.8 &nbsp; 8.8.4.4 OpenDNS ：208.67.222.222 &nbsp; 208.67.220.220原文链接：https://blog.csdn.net/fatsimple/article/details/52043625 挨个试这些DNS，直到成功为止。","categories":[],"tags":[]},{"title":"我的博客搭建过程","slug":"我的第一篇博客","date":"2020-03-15T08:29:18.114Z","updated":"2020-03-17T05:27:40.390Z","comments":true,"path":"2020/03/15/wo-de-di-yi-pian-bo-ke/","link":"","permalink":"http://pengah123.github.io/2020/03/15/wo-de-di-yi-pian-bo-ke/","excerpt":"","text":"前期工作参见视频：CodeSheep——程序猿如何搭建一个属于自己的个人博客他的GitHub账号：hangsonwang99动态博客实例——GitHub账号——Hsite分为前台和后端，后端可用java、python、PHP、c#，动态的意思就是后台可以管理自己动手/成熟的框架（wordpress.org，基于PHP）静态博客框架：hexo.io(node.js)，Jekylllrb.com，gohugo.org(go语言)，vuepress.vuejs.org/zh(基于vue.js)，solo.b3log.org（基于Java），纯js展示界面，无登陆 参见视频：CodeSheep——手把手教你从0开始搭建自己的个人博客-hexo先搭建起来到远端，再考虑内容、美观等 安装node.js，nodes.org，安装完查看node ,npm版本，还要装git 用npm安装cnpm,淘宝镜像——主要是为了增加速度 用cnpm安装hexo，安装完验证 Hexo初始化 部署成功，在localhosst上，可以写文章了！ 部署到GitHub上，创建一个空仓库，仓库名命名为 owner.github.io（必须这么命名），安装一个插件 camp install —save hexo-deployed-git,修改config，deploy——repo:仓库地址（这一步很关键） 更换博客hexo主题(github上下载)，clone到themes，然后修改config，改完之后还要deploy到GitHub 遇到的问题部署到GitHub失败，偶尔成功，偶尔失败。。。。显示错误原因是无法连接到GitHub.com，我的浏览器也上不去GitHub，可能是被墙了，于是转为在coding上部署coding上部署存在一个问题，我们先创建仓库，然后把本地博客推到coding仓库，然后再创建静态网站，百度上说的Pages页面没有找到，直接创建的静态网站生成的域名不是我的仓库名，但是看着也还行，coding是国内的代码管理器，也是基于Git的，但是部署速度要快很多到此为止，网站部署成功，开始看代码改代码写博客","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-03-15T08:07:24.371Z","updated":"2020-03-15T08:07:24.371Z","comments":true,"path":"2020/03/15/hello-world/","link":"","permalink":"http://pengah123.github.io/2020/03/15/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}