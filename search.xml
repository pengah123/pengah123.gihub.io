<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java学习笔记02</title>
      <link href="/2020/03/31/java-xue-xi-bi-ji-02/"/>
      <url>/2020/03/31/java-xue-xi-bi-ji-02/</url>
      
        <content type="html"><![CDATA[<h3 id="Interator接口"><a href="#Interator接口" class="headerlink" title="Interator接口"></a>Interator接口</h3><pre><code>获取集合对应的迭代器，用来遍历集合中的元素，是Collection元素集合的通用获取方式 </code></pre><ul><li><p>常用方法</p><ul><li>next()    获取下一个</li><li>hasnext()    判断是否还有下一个, NoSuchElementException异常</li></ul></li></ul><ul><li><p>使用步骤：</p><ul><li>使用集合中的方法iterator()方法获取一个interator对象</li><li>使用对象的hasnext方法判断</li><li>使用next方法取出下一个元素</li></ul></li></ul><h5 id="for-each循环（增强for循环）："><a href="#for-each循环（增强for循环）：" class="headerlink" title="for each循环（增强for循环）："></a>for each循环（增强for循环）：</h5><ul><li>用for循环的格式简化了iteator迭代器<ul><li>for(类型名 变量名：集合名)</li><li>for(int i : arr);</li></ul></li></ul><h5 id="泛型："><a href="#泛型：" class="headerlink" title="泛型："></a>泛型：<E></h5><ul><li><p>定义</p><ul><li>一个不确定类型</li><li>可以用来接收变量</li></ul></li><li><p>创建对象的时候会确定泛型的类型    </p></li><li><p>当集合不使用泛型时，会使用Object类型，可以添加任意类型的数据，坏处就是不安全，容易引发异常</p></li><li><p>使用泛型的好处：把运行期异常提升到了编译期异常</p></li></ul><p>定义一个含有泛型的类</p><pre><code>public class GenericClass&lt;E&gt;{  private E name;    public E getName(){        return name;    }    public void setName(E name){        this.name=name;    }}</code></pre><ul><li>含有泛型的方法在调用方法时确定泛型的类型</li></ul><pre><code>//定义一个含有泛型的方法public &lt;M&gt; void method01(&lt;M&gt; m){}        这个方法可以用泛型//定义一个含有泛型的静态方法public static &lt;S&gt; void method01(&lt;S&gt; m){}</code></pre><ul><li><p>含有泛型的接口</p><ol><li>在接口的实现类中指定泛型的类型</li><li>在实现类中不指定泛型，实现类中的泛型使用和接口中一样的泛型，在对象中指定泛型类型</li></ol></li></ul><ul><li><p>泛型通配符：</p><ul><li>不知道用什么类型来接收的时候，用？表示未知通配符</li><li>？代表任意数据类型</li><li>使用方法：<ul><li>不能创建对象使用，只能作为方法的参数使用 </li></ul></li></ul></li><li><p>通配符高级使用——受限泛型</p></li></ul><pre><code>类型名称 &lt;? extends类&gt; 对象名称//只能接收该类型及其子类类型名称 &lt;? super类&gt; 对象名称//只能接收该类型及其父类</code></pre><h3 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h3><p>栈、列表、数组、链表、红黑树</p><h5 id="栈：先进后出"><a href="#栈：先进后出" class="headerlink" title="栈：先进后出"></a>栈：先进后出</h5><h5 id="队列：先进先出"><a href="#队列：先进先出" class="headerlink" title="队列：先进先出"></a>队列：先进先出</h5><h5 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h5><ul><li><p>特点</p><ul><li>查询快，增删慢</li></ul></li></ul><blockquote><p>   数组的长度无法改变，要删除或增加需要新建一个数组，把原数组中的数据删除之后复制到新数组，然后销毁原数组</p></blockquote><h5 id="链表："><a href="#链表：" class="headerlink" title="链表："></a>链表：</h5><p>查询慢，增删快</p><ul><li>查询慢：链表中的地址不是连续的，每次查询都要从头开始</li><li>增删快：增加或删除一个元素对链表的整体结构没有影响</li><li>一个节点=一个数据源+两个指针域</li><li>单向链表：只有一条链子，不能保证元素的顺序</li><li>双向链表：有两条链子，以一条链子专门记录元素的顺序，是有序集合</li></ul><blockquote><p>树——二叉树——排序树（左边小右边大）——平衡树（左右孩子数量一样）</p></blockquote><h5 id="红黑树："><a href="#红黑树：" class="headerlink" title="红黑树："></a>红黑树：</h5><p>趋近于平衡树，查找子节点最大次数和最小次数之差不能超过2倍</p><ol><li>节点可以是黑色或红色</li><li>根节点是黑色</li><li>叶子节点（空节点）是黑色</li><li>每个红色节点的子节点是黑色</li><li>每个节点到其每个叶子系欸但的所有路径上黑色节点数相同</li></ol><blockquote><p>红黑树的查询速度非常快</p></blockquote><h3 id="可变参数："><a href="#可变参数：" class="headerlink" title="可变参数："></a>可变参数：</h3><ul><li>使用背景：<ul><li>参数列表的类型已经确定，但是参数的个数不确定，一般用在定义方法时使用。</li></ul></li><li>底层是一个数组，根据传递参数的个数不同创建不同长度的数组来存储，可传递0个或多个  <ul><li>method（int…arr）/ method(Object…o)</li></ul></li><li>注意：<ul><li>一个方法的参数列表只能有一个可变参数；如果参数有多个，可变参数必须写在列表末尾</li></ul></li></ul><h3 id="Collections工具类："><a href="#Collections工具类：" class="headerlink" title="Collections工具类："></a>Collections工具类：</h3><pre><code>记住：Collection是接口，Collections是工具类</code></pre><ul><li><p>常用方法</p><ul><li>Collections.addAll(list,”a”,”c”);    //往集合中添加多个数据</li><li>static void shuffle(List&lt;?&gt; list)     //随机打乱集合的顺序</li><li>Collections.sort(list)        //升序排序，排序的数据类型需要实现comparable接口，重写接口中的</li><li>CompareTo()方法（返回值为：this.参数-别人.参数就是升序，反之降序）</li></ul></li></ul><pre><code>Collections.sort(list1,  new Comparator&lt;Student&gt;(){        public int compare(Student o1,Student o2){            int result=o1.age-o2.age;            if(result==0){            result o1.getName.charAt(0)-o2.getName.charAt(0);        }        return result;//按年龄升序，如果年龄相同则按照姓名首字母升序        }});    </code></pre><h3 id="Map集合："><a href="#Map集合：" class="headerlink" title="Map集合："></a>Map集合：</h3><ul><li><p>定义：</p><p>  包含一个键，一个值    键是不可重复的，键和值一一对应，值可重复</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记01</title>
      <link href="/2020/03/31/java-xue-xi-bi-ji-01/"/>
      <url>/2020/03/31/java-xue-xi-bi-ji-01/</url>
      
        <content type="html"><![CDATA[<h3 id="Calender类："><a href="#Calender类：" class="headerlink" title="Calender类："></a>Calender类：</h3><ul><li>是一个抽象类</li><li>getInstance()方法直接返回一个canlender子类</li></ul><pre><code>//创建对象Calendar c = Calender.getInstance();//常用方法public int get (int field):    返回给定日历字段的值public void set(int field, int value)    将给定的日历字段设置为指定值public abstract void add(int field,int amount)    为给定日历字段添加或减去指定的时间量public Date getTime()    返回一个表示此calender的时间值的Date对象field——Calender.MONTH</code></pre><h3 id="System类："><a href="#System类：" class="headerlink" title="System类："></a>System类：</h3><ul><li>currentTimeMills（)方法：    以毫秒为单位返回当前时间</li><li>arraycopy()方法：将数组中的制定数据拷贝到另一个数组中</li><li>参数：原数组，起始位置，目标数组，复制长度</li></ul><h3 id="StringBuilder类："><a href="#StringBuilder类：" class="headerlink" title="StringBuilder类："></a>StringBuilder类：</h3><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><ul><li>字符串缓冲区，可以提高字符串使用的效率</li><li>可以改变长度，初始长度为16，始终只有一个数组</li></ul><h5 id="常用方法：toString-append"><a href="#常用方法：toString-append" class="headerlink" title="常用方法：toString(),    append();"></a>常用方法：toString(),    append();</h5><p>   １.append(): 可以添加任意类型的数据，返回的是字符串本身<br>   ２.toString():将StringBuilder对象转换为String对象</p><h5 id="String和StringBuilder的转换"><a href="#String和StringBuilder的转换" class="headerlink" title="String和StringBuilder的转换"></a>String和StringBuilder的转换</h5><ul><li>将String转换为StringBuilder对象，直接StringBuilder（str)新建一个StringBuilder对象</li></ul><blockquote><p>快捷键的使用：StringBuilder（str).var +回车 自动生成新建一个StringBuilder对象；.new 新建，.var补全新建</p></blockquote><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类:"></a>包装类:</h3><h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><ul><li>int    Integer</li><li>char    Character</li></ul><pre><code>//构造方法：Integer i=new Integer(int value/String s)//静态方法Integer.valueOf(int i)        Integer. valueOf(String s)</code></pre><p>自动装箱，自动拆箱：基本类型和包装类之间的转换</p><pre><code>Integer i=1;String s=&quot;123&quot;;</code></pre><h5 id="基本类型和字符串类型之间的转换："><a href="#基本类型和字符串类型之间的转换：" class="headerlink" title="基本类型和字符串类型之间的转换："></a>基本类型和字符串类型之间的转换：</h5><ul><li>基本类型——字符串</li></ul><ol><li>基本类型的值+“”</li><li>包装类的静态方法：toString()    Integer.toString()</li><li>String 类的静态方法 valueOf()    String.valueOf(int i)</li></ol><ul><li>字符串——基本类型<br>  包装类的静态方法：Integer.parseInt(String s)</li></ul><h3 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h3><p><img src="/img/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt=""></p><blockquote><p>学习顶层，使用底层</p></blockquote><h5 id="Collections常用方法："><a href="#Collections常用方法：" class="headerlink" title="Collections常用方法："></a>Collections常用方法：</h5><ol><li>boolean add(E e)</li><li>void clear()</li><li>boolean remove(E e)</li><li>boolean contains(E e)</li><li>boolean isEmpty()</li><li>int size()</li><li>Object[] toArray()</li><li>打印输出：直接sout(对象名)；</li></ol><h5 id="List接口："><a href="#List接口：" class="headerlink" title="List接口："></a>List接口：</h5><ul><li><p>常用方法：</p><ul><li>add(int index,E element)    </li><li>get(int index)    </li><li>remove(int index)    </li><li>set(int index, e Element)</li></ul></li><li><p>注意，使用过程中防止索引越界异常</p></li><li><p>ArrayList集合：</p><ul><li>（不是同步的）跟数组一样，查询快，增删慢</li></ul></li><li><p>LinkedList集合：</p><ul><li>跟链表一样，增删快，查询慢</li></ul></li><li><p>常用方法：</p><ul><li>addFirst();   </li><li>addLast();    </li><li>push();        </li><li>getFirst();    </li><li>getLast();    </li><li>removeFirst();    </li><li>removeLast();    </li><li>pop();        </li><li>isEmpty();</li></ul></li><li><p>vector集合：</p><ul><li>（同步的），底层也是数组 ，被ArrayList取代了</li></ul></li><li><p>注：此实现不是同步的，说明是多线程，说明快</p></li></ul><h5 id="Set接口："><a href="#Set接口：" class="headerlink" title="Set接口："></a>Set接口：</h5><ul><li><p>用迭代器或者增强for遍历</p></li><li><p>HashSet集合：</p><ul><li><p>哈希表结构，速度快，无序集合</p></li><li><p>hashCode()方法返回对象的哈希码值，可以在类中重写此方法</p></li><li><p>哈希表=数组+链表+红黑树</p></li><li><p>存储方式：将元素对应的哈希值放在数组中，如果链表长度超过八倍，就将链表转换为红黑树</p></li><li><p>哈希冲突时调用equals（）方法</p></li><li><p>HashSet中存储的元素类型，必须要重写hashCode（）和equals（）方法</p></li></ul></li><li><p>LinkedHashSet集合</p><ul><li>继承于HashSet集合</li><li>多了一条链表以保证元素有序</li><li>有序，不允许重复</li></ul></li></ul><h5 id="HashSet中值不重复的原理"><a href="#HashSet中值不重复的原理" class="headerlink" title="HashSet中值不重复的原理"></a>HashSet中值不重复的原理</h5><p><img src="/img//Image.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决github连不上的问题</title>
      <link href="/2020/03/18/jie-jue-github-lian-bu-shang-de-wen-ti/"/>
      <url>/2020/03/18/jie-jue-github-lian-bu-shang-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>前面因为github连不上我一直用的vpn上的github，这也导致了我的博客部署到github失败，没办法只能部署到coding。</p><p>这几天我的vpn到期了，github上不去真的还挺不方便的。<br>之前我一直以为github是被墙了，然后我发现别人的都能用，手机端也是可以用的，难不成真的是我的电脑的问题？？？<br>还能屏蔽单个网站？？？这超出我的认知了</p><h4 id="方法一：百度上大部分是一些改host文件的，具体操作如下："><a href="#方法一：百度上大部分是一些改host文件的，具体操作如下：" class="headerlink" title="方法一：百度上大部分是一些改host文件的，具体操作如下："></a>方法一：百度上大部分是一些改host文件的，具体操作如下：</h4><p>第一步：找到host文件：C:\Windows\System32\drivers\etc，复制粘贴到桌面（host文件不能直接修改保存需要拷贝出来改完再放回去）；</p><p>第二步：到这个网站——<a href="http://ipaddress.com/ip-lookup/" target="_blank">http://ipaddress.com/ip-lookup/</a>，<br>查找这两个网址的IP地址并复制到host文件下</p><pre><code>140.82.114.3 github.com199.232.69.194 github.global.ssl.fastly.net</code></pre><p>第三步：别忘了再把host文件从桌面复制粘贴回到etc文件下。</p><p>总之，这个方法我试了很久，都没成功</p><h4 id="方法二：改电脑的DNS"><a href="#方法二：改电脑的DNS" class="headerlink" title="方法二：改电脑的DNS"></a>方法二：改电脑的DNS</h4><p>第一步：右键电脑的设置<br><img src="/img/1.png" alt=""></p><p>第二步：打开网络和Internet设置<br><img src="/img/2.png" alt=""></p><p>第三步：选择“更改适配器”<br><img src="/img/3.png" alt=""></p><p>第四步：右键你的网络，选择属性<br><img src="/img/4.png" alt=""></p><p>第五步：选中“iPv4协议”，选择属性<br><img src="/img/5.png" alt=""></p><p>第六步：更改DNS服务器的值<br><img src="/img/6.png" alt=""><br>可靠的DNS服务供应商：<br>               V2EX DNS  ：199.91.73.222    &nbsp; 178.79.131.110<br>               阿里DNS   ：223.5.5.5      &nbsp;  223.6.6.6<br>               Google DNS：8.8.8.8        &nbsp;  8.8.4.4<br>               OpenDNS   ：208.67.222.222  &nbsp; 208.67.220.220<br>原文链接：<a href="https://blog.csdn.net/fatsimple/article/details/52043625" target="_blank" rel="noopener">https://blog.csdn.net/fatsimple/article/details/52043625</a></p><p>挨个试这些DNS，直到成功为止。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的博客搭建过程</title>
      <link href="/2020/03/15/wo-de-di-yi-pian-bo-ke/"/>
      <url>/2020/03/15/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="前期工作"><a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h2><h3 id="参见视频：CodeSheep——程序猿如何搭建一个属于自己的个人博客"><a href="#参见视频：CodeSheep——程序猿如何搭建一个属于自己的个人博客" class="headerlink" title="参见视频：CodeSheep——程序猿如何搭建一个属于自己的个人博客"></a>参见视频：<a href="https://www.bilibili.com/video/av37128014" target="_blank">CodeSheep——程序猿如何搭建一个属于自己的个人博客</a></h3><p>他的GitHub账号：hangsonwang99<br>动态博客<br>实例——GitHub账号——Hsite<br>分为前台和后端，后端可用java、python、PHP、c#，动态的意思就是后台可以管理<br>自己动手/成熟的框架（wordpress.org，基于PHP）<br>静态博客<br>框架：hexo.io(node.js)，Jekylllrb.com，gohugo.org(go语言)，vuepress.vuejs.org/zh(基于vue.js)，solo.b3log.org（基于Java），<br>纯js展示界面，无登陆</p><h3 id="参见视频：CodeSheep——手把手教你从0开始搭建自己的个人博客-hexo"><a href="#参见视频：CodeSheep——手把手教你从0开始搭建自己的个人博客-hexo" class="headerlink" title="参见视频：CodeSheep——手把手教你从0开始搭建自己的个人博客-hexo"></a>参见视频：<a href="https://www.bilibili.com/video/av44544186?from=search&seid=17960554175678125013" target="_blank">CodeSheep——手把手教你从0开始搭建自己的个人博客-hexo</a></h3><p>先搭建起来到远端，再考虑内容、美观等</p><ol><li>安装node.js，nodes.org，安装完查看node ,npm版本，还要装git</li><li>用npm安装cnpm,淘宝镜像——主要是为了增加速度</li><li>用cnpm安装hexo，安装完验证</li><li>Hexo初始化</li><li>部署成功，在localhosst上，可以写文章了！</li><li>部署到GitHub上，创建一个空仓库，仓库名命名为 owner.github.io（必须这么命名），安装一个插件 camp install —save hexo-deployed-git,修改config，deploy——repo:仓库地址（这一步很关键）</li><li>更换博客hexo主题(github上下载)，clone到themes，然后修改config，改完之后还要deploy到GitHub</li></ol><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>部署到GitHub失败，偶尔成功，偶尔失败。。。。<br>显示错误原因是无法连接到GitHub.com，我的浏览器也上不去GitHub，可能是被墙了，于是转为在coding上部署<br>coding上部署存在一个问题，我们先创建仓库，然后把本地博客推到coding仓库，然后再创建静态网站，百度上说的Pages页面没有找到，直接创建的静态网站生成的域名不是我的仓库名，但是看着也还行，coding是国内的代码管理器，也是基于Git的，但是部署速度要快很多<br>到此为止，网站部署成功，开始看代码改代码写博客</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/15/hello-world/"/>
      <url>/2020/03/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
